// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zabita.DataAccessLayer.Concrete.EntityFramework;

namespace Zabita.DataAccessLayer.Migrations
{
    [DbContext(typeof(ZabitaDatabaseContext))]
    [Migration("20210719221645_IsAtanabilir")]
    partial class IsAtanabilir
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Zabita.Entities.Concrete.Amirlik", b =>
                {
                    b.Property<int>("AmirlikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AmirlikIsım")
                        .HasColumnType("text");

                    b.Property<int?>("AmirlikMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<string>("AmirlikSeriNo")
                        .HasColumnType("text");

                    b.Property<bool>("TalepEdilebilir")
                        .HasColumnType("boolean");

                    b.HasKey("AmirlikID");

                    b.HasIndex("AmirlikMudurlukMudurlukId");

                    b.HasIndex("AmirlikSeriNo")
                        .IsUnique();

                    b.ToTable("Amirliks");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.AmirlikYerleskec", b =>
                {
                    b.Property<int>("YerleskeId")
                        .HasColumnType("integer");

                    b.Property<int>("AmirlikID")
                        .HasColumnType("integer");

                    b.HasKey("YerleskeId", "AmirlikID");

                    b.HasIndex("AmirlikID");

                    b.ToTable("AmirlikYerleskecs");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Demirbas", b =>
                {
                    b.Property<int>("DemirbasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DemirbasAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<string>("DemirbasIsim")
                        .HasColumnType("text");

                    b.Property<int?>("DemirbasMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<int?>("DemirbasOdaOdaId")
                        .HasColumnType("integer");

                    b.Property<int?>("DemirbasPersonelPersonelId")
                        .HasColumnType("integer");

                    b.Property<int?>("DemirbasYerleskeYerleskeId")
                        .HasColumnType("integer");

                    b.HasKey("DemirbasId");

                    b.HasIndex("DemirbasAmirlikAmirlikID");

                    b.HasIndex("DemirbasMudurlukMudurlukId");

                    b.HasIndex("DemirbasOdaOdaId");

                    b.HasIndex("DemirbasPersonelPersonelId");

                    b.HasIndex("DemirbasYerleskeYerleskeId");

                    b.ToTable("Demirbases");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Foto", b =>
                {
                    b.Property<int>("FotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FotoAciklama")
                        .HasColumnType("text");

                    b.Property<string>("FotoAdi")
                        .HasColumnType("text");

                    b.Property<int?>("FotoAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FotoData")
                        .HasColumnType("bytea");

                    b.Property<int?>("FotoDemirbasDemirbasId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FotoEklenmeTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FotoMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<int?>("FotoOdaOdaId")
                        .HasColumnType("integer");

                    b.Property<int?>("FotoPersonelPersonelId")
                        .HasColumnType("integer");

                    b.Property<int?>("FotoSarfSarfId")
                        .HasColumnType("integer");

                    b.Property<int?>("FotoTalepTalepId")
                        .HasColumnType("integer");

                    b.Property<int?>("FotoYerleskeBakimOnarimYerleskeBakimOnarimId")
                        .HasColumnType("integer");

                    b.Property<int?>("FotoYerleskeIklimlendirmeYerleskeIklimlendirmeId")
                        .HasColumnType("integer");

                    b.Property<int?>("FotoYerleskeTeknikBilgilerYerleskeTeknikBilgilerId")
                        .HasColumnType("integer");

                    b.Property<int?>("FotoYerleskeYerleskeId")
                        .HasColumnType("integer");

                    b.Property<string>("YapilanIs")
                        .HasColumnType("text");

                    b.Property<string>("YapilanIsAdi")
                        .HasColumnType("text");

                    b.HasKey("FotoId");

                    b.HasIndex("FotoAmirlikAmirlikID");

                    b.HasIndex("FotoDemirbasDemirbasId");

                    b.HasIndex("FotoMudurlukMudurlukId");

                    b.HasIndex("FotoOdaOdaId");

                    b.HasIndex("FotoPersonelPersonelId");

                    b.HasIndex("FotoSarfSarfId");

                    b.HasIndex("FotoTalepTalepId");

                    b.HasIndex("FotoYerleskeBakimOnarimYerleskeBakimOnarimId");

                    b.HasIndex("FotoYerleskeIklimlendirmeYerleskeIklimlendirmeId");

                    b.HasIndex("FotoYerleskeTeknikBilgilerYerleskeTeknikBilgilerId");

                    b.HasIndex("FotoYerleskeYerleskeId");

                    b.ToTable("Fotolar");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.IsAltTipleri", b =>
                {
                    b.Property<int>("IsAltTipiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IsAltTipi")
                        .HasColumnType("text");

                    b.Property<string>("IsAltTipiAciklama")
                        .HasColumnType("text");

                    b.Property<string>("IsTipiEslesmeId")
                        .HasColumnType("text");

                    b.Property<int?>("IstipiTalepTalepId")
                        .HasColumnType("integer");

                    b.Property<int?>("TalepSonucuId")
                        .HasColumnType("integer");

                    b.HasKey("IsAltTipiId");

                    b.HasIndex("IstipiTalepTalepId");

                    b.HasIndex("TalepSonucuId");

                    b.ToTable("IsAltTipleris");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.IsTipleri", b =>
                {
                    b.Property<int>("IstipiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AmirlikId")
                        .HasColumnType("text");

                    b.Property<string>("AmirlikIsim")
                        .HasColumnType("text");

                    b.Property<string>("IsTipi")
                        .HasColumnType("text");

                    b.HasKey("IstipiID");

                    b.ToTable("IsTipleris");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LogPersonel")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogTarih")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LogYapilanIs")
                        .HasColumnType("text");

                    b.Property<string>("LogYapilanTur")
                        .HasColumnType("text");

                    b.HasKey("LogID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Modul", b =>
                {
                    b.Property<int>("ModulId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ModulIsim")
                        .HasColumnType("text");

                    b.HasKey("ModulId");

                    b.ToTable("Moduls");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.ModulPersonelc", b =>
                {
                    b.Property<int>("ModulId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonelId")
                        .HasColumnType("integer");

                    b.HasKey("ModulId", "PersonelId");

                    b.HasIndex("PersonelId");

                    b.ToTable("ModulPersonelc");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Mudurluk", b =>
                {
                    b.Property<int>("MudurlukId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MudurlukIsim")
                        .HasColumnType("text");

                    b.Property<string>("MudurlukSeriNo")
                        .HasColumnType("text");

                    b.HasKey("MudurlukId");

                    b.HasIndex("MudurlukSeriNo")
                        .IsUnique();

                    b.ToTable("Mudurluks");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.MudurlukYerleskec", b =>
                {
                    b.Property<int>("YerleskeId")
                        .HasColumnType("integer");

                    b.Property<int>("MudurlukId")
                        .HasColumnType("integer");

                    b.HasKey("YerleskeId", "MudurlukId");

                    b.HasIndex("MudurlukId");

                    b.ToTable("MudurlukYerleskecs");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Oda", b =>
                {
                    b.Property<int>("OdaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("OdaAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<string>("OdaIsim")
                        .HasColumnType("text");

                    b.Property<int?>("OdaMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<string>("OdaSeriNo")
                        .HasColumnType("text");

                    b.HasKey("OdaId");

                    b.HasIndex("OdaAmirlikAmirlikID");

                    b.HasIndex("OdaMudurlukMudurlukId");

                    b.HasIndex("OdaSeriNo")
                        .IsUnique();

                    b.ToTable("Odas");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.OdaYerleskec", b =>
                {
                    b.Property<int>("YerleskeId")
                        .HasColumnType("integer");

                    b.Property<int>("OdaId")
                        .HasColumnType("integer");

                    b.HasKey("YerleskeId", "OdaId");

                    b.HasIndex("OdaId");

                    b.ToTable("OdaYerleskecs");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Personel", b =>
                {
                    b.Property<int>("PersonelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IsAtanabilir")
                        .HasColumnType("text");

                    b.Property<string>("KullaniciAdi")
                        .HasColumnType("text");

                    b.Property<int?>("PersonelAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<string>("PersonelDahili")
                        .HasColumnType("text");

                    b.Property<string>("PersonelIsim")
                        .HasColumnType("text");

                    b.Property<int?>("PersonelMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonelOdaOdaId")
                        .HasColumnType("integer");

                    b.Property<string>("PersonelSicil")
                        .HasColumnType("text");

                    b.Property<string>("PersonelSoyisim")
                        .HasColumnType("text");

                    b.Property<string>("PersonelTelefon")
                        .HasColumnType("text");

                    b.Property<int?>("PersonelYerleskeYerleskeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonelYetkiYetkiId")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeBakimOnarimId")
                        .HasColumnType("integer");

                    b.Property<string>("YetkiLevel")
                        .HasColumnType("text");

                    b.HasKey("PersonelId");

                    b.HasIndex("PersonelAmirlikAmirlikID");

                    b.HasIndex("PersonelId")
                        .IsUnique();

                    b.HasIndex("PersonelMudurlukMudurlukId");

                    b.HasIndex("PersonelOdaOdaId");

                    b.HasIndex("PersonelYerleskeYerleskeId");

                    b.HasIndex("PersonelYetkiYetkiId");

                    b.HasIndex("YerleskeBakimOnarimId");

                    b.ToTable("Personel");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Sarf", b =>
                {
                    b.Property<int>("SarfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("SarfAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<string>("SarfIsım")
                        .HasColumnType("text");

                    b.Property<int?>("SarfMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<int?>("SarfOdaOdaId")
                        .HasColumnType("integer");

                    b.Property<int?>("SarfPersonelPersonelId")
                        .HasColumnType("integer");

                    b.Property<int?>("SarfYerleskeYerleskeId")
                        .HasColumnType("integer");

                    b.HasKey("SarfId");

                    b.HasIndex("SarfAmirlikAmirlikID");

                    b.HasIndex("SarfMudurlukMudurlukId");

                    b.HasIndex("SarfOdaOdaId");

                    b.HasIndex("SarfPersonelPersonelId");

                    b.HasIndex("SarfYerleskeYerleskeId");

                    b.ToTable("Sarfs");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.SeriNo", b =>
                {
                    b.Property<int>("SeriNoId")
                        .HasColumnType("integer");

                    b.Property<string>("SeriNoAdresleme")
                        .HasColumnType("text");

                    b.Property<string>("SeriNoYerleskeIsim")
                        .HasColumnType("text");

                    b.HasKey("SeriNoId");

                    b.ToTable("SeriNo");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Takvim", b =>
                {
                    b.Property<int>("TakvimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TakvimIsım")
                        .HasColumnType("text");

                    b.Property<string>("TakvimSahibi")
                        .HasColumnType("text");

                    b.Property<int>("TakvimTip")
                        .HasColumnType("integer");

                    b.HasKey("TakvimId");

                    b.ToTable("Takvims");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.TakvimDetaylari", b =>
                {
                    b.Property<int>("TakvimDetaylariId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("TakvimDetayBilgisi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TakvimTakvimDetaylariTakvimId")
                        .HasColumnType("integer");

                    b.HasKey("TakvimDetaylariId");

                    b.HasIndex("TakvimTakvimDetaylariTakvimId");

                    b.ToTable("TakvimDetaylari");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Talep", b =>
                {
                    b.Property<int>("TalepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AmirlikId")
                        .HasColumnType("text");

                    b.Property<int?>("TalebiIsteyenPersonelPersonelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TalebiKarsilayanPersonelPersonelId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TalebinKarsilanmaTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TalebinYapilmaTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TalepAciklama")
                        .HasColumnType("text");

                    b.Property<int?>("TalepAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<string>("TalepBaslik")
                        .HasColumnType("text");

                    b.Property<string>("TalepIstipleriID")
                        .HasColumnType("text");

                    b.Property<int?>("TalepIstipleriIstipiID")
                        .HasColumnType("integer");

                    b.Property<string>("TalepKapanisBilgisi")
                        .HasColumnType("text");

                    b.Property<string>("TalepKonu")
                        .HasColumnType("text");

                    b.Property<int>("TalepTipi")
                        .HasColumnType("integer");

                    b.Property<string>("YerleskeAciklamasi")
                        .HasColumnType("text");

                    b.HasKey("TalepId");

                    b.HasIndex("TalebiIsteyenPersonelPersonelId");

                    b.HasIndex("TalebiKarsilayanPersonelPersonelId");

                    b.HasIndex("TalepAmirlikAmirlikID");

                    b.HasIndex("TalepIstipleriIstipiID");

                    b.ToTable("Talep");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.TalepAltSonucu", b =>
                {
                    b.Property<int>("TalepAltSonucuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TalepAltSonucuAciklama")
                        .HasColumnType("text");

                    b.Property<int>("TalepAltSonucuIlgiliTalepTipi")
                        .HasColumnType("integer");

                    b.Property<string>("TalepAltSonucuKapanisBilgisi")
                        .HasColumnType("text");

                    b.Property<string>("TalepAltSonucuTipi")
                        .HasColumnType("text");

                    b.Property<string>("TalepId")
                        .HasColumnType("text");

                    b.Property<int?>("TaleptalepaltsonucuTalepId")
                        .HasColumnType("integer");

                    b.HasKey("TalepAltSonucuId");

                    b.HasIndex("TaleptalepaltsonucuTalepId");

                    b.ToTable("TalepAltSonucus");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.TalepSonucu", b =>
                {
                    b.Property<int>("TalepSonucuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TalepId")
                        .HasColumnType("text");

                    b.Property<string>("TalepSonucuAciklama")
                        .HasColumnType("text");

                    b.Property<string>("TalepSonucuKapanisBilgisi")
                        .HasColumnType("text");

                    b.Property<int>("TalepSonucuTipi")
                        .HasColumnType("integer");

                    b.HasKey("TalepSonucuId");

                    b.ToTable("TalepSonucus");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Tanimlamalar", b =>
                {
                    b.Property<int>("TanimlamalarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Aydinlatma")
                        .HasColumnType("text");

                    b.Property<string>("Catitipi")
                        .HasColumnType("text");

                    b.Property<string>("Insaattipi")
                        .HasColumnType("text");

                    b.Property<string>("Isitmatipi")
                        .HasColumnType("text");

                    b.Property<string>("Sogutmatipi")
                        .HasColumnType("text");

                    b.Property<string>("Zeminbilgisi")
                        .HasColumnType("text");

                    b.HasKey("TanimlamalarId");

                    b.ToTable("Tanimlamalars");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.UygulamaAyarlari", b =>
                {
                    b.Property<int>("UygulamaAyarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("UygulamaYetkiTipleri")
                        .HasColumnType("text");

                    b.HasKey("UygulamaAyarId");

                    b.ToTable("UygulamaAyarlaris");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Yerleske", b =>
                {
                    b.Property<int>("YerleskeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("YerleskeIsim")
                        .HasColumnType("text");

                    b.Property<string>("YerleskeSeriNo")
                        .HasColumnType("text");

                    b.HasKey("YerleskeId");

                    b.HasIndex("YerleskeSeriNo")
                        .IsUnique();

                    b.ToTable("Yerleskes");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeBakimOnarim", b =>
                {
                    b.Property<int>("YerleskeBakimOnarimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BakımOnarimAciklama")
                        .HasColumnType("text");

                    b.Property<DateTime>("BoyamaTarih")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ElektrikBakimTarih")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SihhiTesisatBakimTarih")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("YerleskeBakimOnarimAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeBakimOnarimMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeBakimOnarimOdaOdaId")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeBakimOnarimYerleskeYerleskeId")
                        .HasColumnType("integer");

                    b.HasKey("YerleskeBakimOnarimId");

                    b.HasIndex("YerleskeBakimOnarimAmirlikAmirlikID");

                    b.HasIndex("YerleskeBakimOnarimMudurlukMudurlukId");

                    b.HasIndex("YerleskeBakimOnarimOdaOdaId");

                    b.HasIndex("YerleskeBakimOnarimYerleskeYerleskeId");

                    b.ToTable("yerleskebakimonarims");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeIklimlendirme", b =>
                {
                    b.Property<int>("YerleskeIklimlendirmeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IklimlendirmeAciklama")
                        .HasColumnType("text");

                    b.Property<string>("IsitmaSistemi")
                        .HasColumnType("text");

                    b.Property<DateTime>("KayıtTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SogutmaSistemi")
                        .HasColumnType("text");

                    b.Property<int?>("YerleskeIklimlendirmeAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeIklimlendirmeMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeIklimlendirmeOdaOdaId")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeIklimlendirmeYerleskeYerleskeId")
                        .HasColumnType("integer");

                    b.HasKey("YerleskeIklimlendirmeId");

                    b.HasIndex("YerleskeIklimlendirmeAmirlikAmirlikID");

                    b.HasIndex("YerleskeIklimlendirmeMudurlukMudurlukId");

                    b.HasIndex("YerleskeIklimlendirmeOdaOdaId");

                    b.HasIndex("YerleskeIklimlendirmeYerleskeYerleskeId");

                    b.ToTable("yerleskeiklimlendirmes");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeTeknikBilgiler", b =>
                {
                    b.Property<int>("YerleskeTeknikBilgilerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AcilCikis")
                        .HasMaxLength(5)
                        .HasColumnType("boolean");

                    b.Property<string>("AlanBilgisi")
                        .HasColumnType("text");

                    b.Property<bool>("Asansör")
                        .HasMaxLength(5)
                        .HasColumnType("boolean");

                    b.Property<string>("Aydinlatma")
                        .HasColumnType("text");

                    b.Property<string>("CatiTipi")
                        .HasColumnType("text");

                    b.Property<string>("Diger")
                        .HasColumnType("text");

                    b.Property<bool>("EngelliErisimi")
                        .HasMaxLength(5)
                        .HasColumnType("boolean");

                    b.Property<int>("Genislik")
                        .HasColumnType("integer");

                    b.Property<string>("InsaatTipi")
                        .HasColumnType("text");

                    b.Property<string>("KatBilgisi")
                        .HasColumnType("text");

                    b.Property<DateTime>("KayıtTarihi")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("MerkeziYanginSondurme")
                        .HasMaxLength(5)
                        .HasColumnType("boolean");

                    b.Property<string>("TeknikBilgilerAciklama")
                        .HasColumnType("text");

                    b.Property<int>("Uzunluk")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeTeknikBilgilerAmirlikAmirlikID")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeTeknikBilgilerMudurlukMudurlukId")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeTeknikBilgilerOdaOdaId")
                        .HasColumnType("integer");

                    b.Property<int?>("YerleskeTeknikBilgilerYerleskeYerleskeId")
                        .HasColumnType("integer");

                    b.Property<string>("ZeminBilgisi")
                        .HasColumnType("text");

                    b.HasKey("YerleskeTeknikBilgilerId");

                    b.HasIndex("YerleskeTeknikBilgilerAmirlikAmirlikID");

                    b.HasIndex("YerleskeTeknikBilgilerMudurlukMudurlukId");

                    b.HasIndex("YerleskeTeknikBilgilerOdaOdaId");

                    b.HasIndex("YerleskeTeknikBilgilerYerleskeYerleskeId");

                    b.ToTable("yerleskeTeknikBilgiler");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Yetki", b =>
                {
                    b.Property<int>("YetkiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AdminYetkisi")
                        .HasColumnType("boolean");

                    b.Property<bool>("Guncelleme")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModulId")
                        .HasColumnType("integer");

                    b.Property<bool>("ModulYoneticisiYetkisi")
                        .HasColumnType("boolean");

                    b.Property<bool>("Okuma")
                        .HasColumnType("boolean");

                    b.Property<int?>("PersonelId")
                        .HasColumnType("integer");

                    b.Property<bool>("PersonelYetkisi")
                        .HasColumnType("boolean");

                    b.Property<bool>("Silme")
                        .HasColumnType("boolean");

                    b.Property<bool>("Yazma")
                        .HasColumnType("boolean");

                    b.Property<int>("YetkiTipi")
                        .HasColumnType("integer");

                    b.Property<bool>("Yetkilendirme")
                        .HasColumnType("boolean");

                    b.Property<bool>("YoneticiYetkisi")
                        .HasColumnType("boolean");

                    b.HasKey("YetkiId");

                    b.HasIndex("ModulId");

                    b.HasIndex("PersonelId");

                    b.ToTable("Yetki");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Amirlik", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "AmirlikMudurluk")
                        .WithMany("Amirlikler")
                        .HasForeignKey("AmirlikMudurlukMudurlukId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AmirlikMudurluk");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.AmirlikYerleskec", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "Amirlik")
                        .WithMany("AmirlikYerleskecs")
                        .HasForeignKey("AmirlikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "Yerleske")
                        .WithMany("AmirlikYerleskecs")
                        .HasForeignKey("YerleskeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amirlik");

                    b.Navigation("Yerleske");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Demirbas", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "DemirbasAmirlik")
                        .WithMany("Demirbaslar")
                        .HasForeignKey("DemirbasAmirlikAmirlikID");

                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "DemirbasMudurluk")
                        .WithMany("Demirbaslar")
                        .HasForeignKey("DemirbasMudurlukMudurlukId");

                    b.HasOne("Zabita.Entities.Concrete.Oda", "DemirbasOda")
                        .WithMany("Demirbaslar")
                        .HasForeignKey("DemirbasOdaOdaId");

                    b.HasOne("Zabita.Entities.Concrete.Personel", "DemirbasPersonel")
                        .WithMany("Demirbaslar")
                        .HasForeignKey("DemirbasPersonelPersonelId");

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "DemirbasYerleske")
                        .WithMany("Demirbaslar")
                        .HasForeignKey("DemirbasYerleskeYerleskeId");

                    b.Navigation("DemirbasAmirlik");

                    b.Navigation("DemirbasMudurluk");

                    b.Navigation("DemirbasOda");

                    b.Navigation("DemirbasPersonel");

                    b.Navigation("DemirbasYerleske");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Foto", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "FotoAmirlik")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoAmirlikAmirlikID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Demirbas", "FotoDemirbas")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoDemirbasDemirbasId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "FotoMudurluk")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoMudurlukMudurlukId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Oda", "FotoOda")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoOdaOdaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Personel", "FotoPersonel")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoPersonelPersonelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Sarf", "FotoSarf")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoSarfSarfId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Talep", "FotoTalep")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoTalepTalepId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.YerleskeBakimOnarim", "FotoYerleskeBakimOnarim")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoYerleskeBakimOnarimYerleskeBakimOnarimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.YerleskeIklimlendirme", "FotoYerleskeIklimlendirme")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoYerleskeIklimlendirmeYerleskeIklimlendirmeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.YerleskeTeknikBilgiler", "FotoYerleskeTeknikBilgiler")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoYerleskeTeknikBilgilerYerleskeTeknikBilgilerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "FotoYerleske")
                        .WithMany("Fotolar")
                        .HasForeignKey("FotoYerleskeYerleskeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FotoAmirlik");

                    b.Navigation("FotoDemirbas");

                    b.Navigation("FotoMudurluk");

                    b.Navigation("FotoOda");

                    b.Navigation("FotoPersonel");

                    b.Navigation("FotoSarf");

                    b.Navigation("FotoTalep");

                    b.Navigation("FotoYerleske");

                    b.Navigation("FotoYerleskeBakimOnarim");

                    b.Navigation("FotoYerleskeIklimlendirme");

                    b.Navigation("FotoYerleskeTeknikBilgiler");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.IsAltTipleri", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Talep", "IstipiTalep")
                        .WithMany()
                        .HasForeignKey("IstipiTalepTalepId");

                    b.HasOne("Zabita.Entities.Concrete.TalepSonucu", null)
                        .WithMany("IsAltTiplerisList")
                        .HasForeignKey("TalepSonucuId");

                    b.Navigation("IstipiTalep");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.ModulPersonelc", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Modul", "Modul")
                        .WithMany("ModulPersonelcs")
                        .HasForeignKey("ModulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zabita.Entities.Concrete.Personel", "Personel")
                        .WithMany("ModulPersonelcs")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modul");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.MudurlukYerleskec", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "Mudurluk")
                        .WithMany("MudurlukYerleskecs")
                        .HasForeignKey("MudurlukId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "Yerleske")
                        .WithMany("MudurlukYerleskecs")
                        .HasForeignKey("YerleskeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mudurluk");

                    b.Navigation("Yerleske");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Oda", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "OdaAmirlik")
                        .WithMany("Odalar")
                        .HasForeignKey("OdaAmirlikAmirlikID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "OdaMudurluk")
                        .WithMany("Odalar")
                        .HasForeignKey("OdaMudurlukMudurlukId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OdaAmirlik");

                    b.Navigation("OdaMudurluk");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.OdaYerleskec", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Oda", "Oda")
                        .WithMany("OdaYerleskecs")
                        .HasForeignKey("OdaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "Yerleske")
                        .WithMany("OdaYerleskecs")
                        .HasForeignKey("YerleskeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oda");

                    b.Navigation("Yerleske");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Personel", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "PersonelAmirlik")
                        .WithMany("Personeller")
                        .HasForeignKey("PersonelAmirlikAmirlikID");

                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "PersonelMudurluk")
                        .WithMany("Personeller")
                        .HasForeignKey("PersonelMudurlukMudurlukId");

                    b.HasOne("Zabita.Entities.Concrete.Oda", "PersonelOda")
                        .WithMany("Personeller")
                        .HasForeignKey("PersonelOdaOdaId");

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "PersonelYerleske")
                        .WithMany("Personeller")
                        .HasForeignKey("PersonelYerleskeYerleskeId");

                    b.HasOne("Zabita.Entities.Concrete.Yetki", "PersonelYetki")
                        .WithMany()
                        .HasForeignKey("PersonelYetkiYetkiId");

                    b.HasOne("Zabita.Entities.Concrete.YerleskeBakimOnarim", null)
                        .WithMany("Personeller")
                        .HasForeignKey("YerleskeBakimOnarimId");

                    b.Navigation("PersonelAmirlik");

                    b.Navigation("PersonelMudurluk");

                    b.Navigation("PersonelOda");

                    b.Navigation("PersonelYerleske");

                    b.Navigation("PersonelYetki");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Sarf", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "SarfAmirlik")
                        .WithMany("Sarf")
                        .HasForeignKey("SarfAmirlikAmirlikID");

                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "SarfMudurluk")
                        .WithMany("Sarf")
                        .HasForeignKey("SarfMudurlukMudurlukId");

                    b.HasOne("Zabita.Entities.Concrete.Oda", "SarfOda")
                        .WithMany("Sarf")
                        .HasForeignKey("SarfOdaOdaId");

                    b.HasOne("Zabita.Entities.Concrete.Personel", "SarfPersonel")
                        .WithMany("Sarf")
                        .HasForeignKey("SarfPersonelPersonelId");

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "SarfYerleske")
                        .WithMany("Sarf")
                        .HasForeignKey("SarfYerleskeYerleskeId");

                    b.Navigation("SarfAmirlik");

                    b.Navigation("SarfMudurluk");

                    b.Navigation("SarfOda");

                    b.Navigation("SarfPersonel");

                    b.Navigation("SarfYerleske");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.TakvimDetaylari", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Takvim", "TakvimTakvimDetaylari")
                        .WithMany("TakvimDetaylaris")
                        .HasForeignKey("TakvimTakvimDetaylariTakvimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TakvimTakvimDetaylari");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Talep", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Personel", "TalebiIsteyenPersonel")
                        .WithMany("Taleps")
                        .HasForeignKey("TalebiIsteyenPersonelPersonelId");

                    b.HasOne("Zabita.Entities.Concrete.Personel", "TalebiKarsilayanPersonel")
                        .WithMany()
                        .HasForeignKey("TalebiKarsilayanPersonelPersonelId");

                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "TalepAmirlik")
                        .WithMany()
                        .HasForeignKey("TalepAmirlikAmirlikID");

                    b.HasOne("Zabita.Entities.Concrete.IsTipleri", "TalepIstipleri")
                        .WithMany()
                        .HasForeignKey("TalepIstipleriIstipiID");

                    b.Navigation("TalebiIsteyenPersonel");

                    b.Navigation("TalebiKarsilayanPersonel");

                    b.Navigation("TalepAmirlik");

                    b.Navigation("TalepIstipleri");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.TalepAltSonucu", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Talep", "Taleptalepaltsonucu")
                        .WithMany("TalepAltSonucus")
                        .HasForeignKey("TaleptalepaltsonucuTalepId");

                    b.Navigation("Taleptalepaltsonucu");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeBakimOnarim", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "YerleskeBakimOnarimAmirlik")
                        .WithMany("YerleskeBakimOnarim")
                        .HasForeignKey("YerleskeBakimOnarimAmirlikAmirlikID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "YerleskeBakimOnarimMudurluk")
                        .WithMany("YerleskeBakimOnarim")
                        .HasForeignKey("YerleskeBakimOnarimMudurlukMudurlukId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Oda", "YerleskeBakimOnarimOda")
                        .WithMany("YerleskeBakimOnarim")
                        .HasForeignKey("YerleskeBakimOnarimOdaOdaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "YerleskeBakimOnarimYerleske")
                        .WithMany("YerleskeBakimOnarim")
                        .HasForeignKey("YerleskeBakimOnarimYerleskeYerleskeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("YerleskeBakimOnarimAmirlik");

                    b.Navigation("YerleskeBakimOnarimMudurluk");

                    b.Navigation("YerleskeBakimOnarimOda");

                    b.Navigation("YerleskeBakimOnarimYerleske");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeIklimlendirme", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "YerleskeIklimlendirmeAmirlik")
                        .WithMany("YerleskeIklimlendirme")
                        .HasForeignKey("YerleskeIklimlendirmeAmirlikAmirlikID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "YerleskeIklimlendirmeMudurluk")
                        .WithMany("YerleskeIklimlendirme")
                        .HasForeignKey("YerleskeIklimlendirmeMudurlukMudurlukId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Oda", "YerleskeIklimlendirmeOda")
                        .WithMany("YerleskeIklimlendirme")
                        .HasForeignKey("YerleskeIklimlendirmeOdaOdaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "YerleskeIklimlendirmeYerleske")
                        .WithMany("YerleskeIklimlendirme")
                        .HasForeignKey("YerleskeIklimlendirmeYerleskeYerleskeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("YerleskeIklimlendirmeAmirlik");

                    b.Navigation("YerleskeIklimlendirmeMudurluk");

                    b.Navigation("YerleskeIklimlendirmeOda");

                    b.Navigation("YerleskeIklimlendirmeYerleske");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeTeknikBilgiler", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Amirlik", "YerleskeTeknikBilgilerAmirlik")
                        .WithMany("YerleskeTeknikBilgiler")
                        .HasForeignKey("YerleskeTeknikBilgilerAmirlikAmirlikID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Mudurluk", "YerleskeTeknikBilgilerMudurluk")
                        .WithMany("YerleskeTeknikBilgiler")
                        .HasForeignKey("YerleskeTeknikBilgilerMudurlukMudurlukId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Oda", "YerleskeTeknikBilgilerOda")
                        .WithMany("YerleskeTeknikBilgiler")
                        .HasForeignKey("YerleskeTeknikBilgilerOdaOdaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Zabita.Entities.Concrete.Yerleske", "YerleskeTeknikBilgilerYerleske")
                        .WithMany("YerleskeTeknikBilgiler")
                        .HasForeignKey("YerleskeTeknikBilgilerYerleskeYerleskeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("YerleskeTeknikBilgilerAmirlik");

                    b.Navigation("YerleskeTeknikBilgilerMudurluk");

                    b.Navigation("YerleskeTeknikBilgilerOda");

                    b.Navigation("YerleskeTeknikBilgilerYerleske");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Yetki", b =>
                {
                    b.HasOne("Zabita.Entities.Concrete.Modul", "Modul")
                        .WithMany("YetkiModuller")
                        .HasForeignKey("ModulId");

                    b.HasOne("Zabita.Entities.Concrete.Personel", "Personel")
                        .WithMany("Yetkis")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Modul");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Amirlik", b =>
                {
                    b.Navigation("AmirlikYerleskecs");

                    b.Navigation("Demirbaslar");

                    b.Navigation("Fotolar");

                    b.Navigation("Odalar");

                    b.Navigation("Personeller");

                    b.Navigation("Sarf");

                    b.Navigation("YerleskeBakimOnarim");

                    b.Navigation("YerleskeIklimlendirme");

                    b.Navigation("YerleskeTeknikBilgiler");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Demirbas", b =>
                {
                    b.Navigation("Fotolar");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Modul", b =>
                {
                    b.Navigation("ModulPersonelcs");

                    b.Navigation("YetkiModuller");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Mudurluk", b =>
                {
                    b.Navigation("Amirlikler");

                    b.Navigation("Demirbaslar");

                    b.Navigation("Fotolar");

                    b.Navigation("MudurlukYerleskecs");

                    b.Navigation("Odalar");

                    b.Navigation("Personeller");

                    b.Navigation("Sarf");

                    b.Navigation("YerleskeBakimOnarim");

                    b.Navigation("YerleskeIklimlendirme");

                    b.Navigation("YerleskeTeknikBilgiler");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Oda", b =>
                {
                    b.Navigation("Demirbaslar");

                    b.Navigation("Fotolar");

                    b.Navigation("OdaYerleskecs");

                    b.Navigation("Personeller");

                    b.Navigation("Sarf");

                    b.Navigation("YerleskeBakimOnarim");

                    b.Navigation("YerleskeIklimlendirme");

                    b.Navigation("YerleskeTeknikBilgiler");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Personel", b =>
                {
                    b.Navigation("Demirbaslar");

                    b.Navigation("Fotolar");

                    b.Navigation("ModulPersonelcs");

                    b.Navigation("Sarf");

                    b.Navigation("Taleps");

                    b.Navigation("Yetkis");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Sarf", b =>
                {
                    b.Navigation("Fotolar");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Takvim", b =>
                {
                    b.Navigation("TakvimDetaylaris");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Talep", b =>
                {
                    b.Navigation("Fotolar");

                    b.Navigation("TalepAltSonucus");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.TalepSonucu", b =>
                {
                    b.Navigation("IsAltTiplerisList");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.Yerleske", b =>
                {
                    b.Navigation("AmirlikYerleskecs");

                    b.Navigation("Demirbaslar");

                    b.Navigation("Fotolar");

                    b.Navigation("MudurlukYerleskecs");

                    b.Navigation("OdaYerleskecs");

                    b.Navigation("Personeller");

                    b.Navigation("Sarf");

                    b.Navigation("YerleskeBakimOnarim");

                    b.Navigation("YerleskeIklimlendirme");

                    b.Navigation("YerleskeTeknikBilgiler");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeBakimOnarim", b =>
                {
                    b.Navigation("Fotolar");

                    b.Navigation("Personeller");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeIklimlendirme", b =>
                {
                    b.Navigation("Fotolar");
                });

            modelBuilder.Entity("Zabita.Entities.Concrete.YerleskeTeknikBilgiler", b =>
                {
                    b.Navigation("Fotolar");
                });
#pragma warning restore 612, 618
        }
    }
}
