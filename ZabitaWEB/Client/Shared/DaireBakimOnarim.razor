@page "/talep/daire"
@using Zabita.Entities.Concrete
@using ZabitaWEB.Client.Services.Abstract
@inject ITalepsService talepsService
@inject IAmirliksService amirliksService
@inject IIsTiplerisService istipleriService
@inject IIsAltTiplerisService isalttipleriService

@inject ISnackbar Snackbar
@inject HttpClient Http

<RadzenCard>
    <div class="card-header " style="max-height:2.3em;background-color:white;font-size:larger;text-align:justify"><h3> Talep Detayları</h3> </div>

    <div class="row">
        <div class="col-md-6 mt-1">

            
            <MudSelect T="IsAltTipleri" Label="İş Seçiniz" HelperText="İşler" MultiSelection="true" @bind-Value="@valuef"
                       @bind-SelectedValues="options" ToStringFunc="@converter">
                @foreach (var state in IsAltTipleriList)
                {
                    <MudSelectItem T="IsAltTipleri" Value="@state">@state.IsAltTipi</MudSelectItem>
                }
            </MudSelect>
       


        </div>
        <div class="col-md-6 mt-1">


            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" TValue="int"
                            @bind-Value=@amirlikid Placeholder="İşin Yapılacağı Amirlik..." Data=@AmirlikList
                            TextProperty="AmirlikIsım" ValueProperty="AmirlikID" Style="width:100%" />


        </div>




    </div>
    <div class="row">
        <div class="col-md-6 mt-1">
            <RadzenTextArea Change=@(args => OnChange(args, "TextArea")) Style="width:100%" Placeholder="İşle İlgili Diğer Açıklamalar..." @bind-Value=@value />

        </div>
        <div class="col-md-6 mt-1">
            <RadzenTextArea Change=@(args => OnChange(args, "TextArea")) Style="width:100%" Placeholder="Yerleşkenin Adres Bilgileri..." />
        </div>
    </div>

    <div class="row">

        <div class="col-md-6">

            <InputFile id="fileInput112" OnChange="UploadFiles" hidden multiple accept=".jpg, .jpeg, .png" />

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.FileUpload"
                       for="fileInput112" Style="width: 100% ">
                Fotoğraf Yükle
            </MudButton>
            @if (files != null)
            {
                <MudList>
                    @foreach (var file in files)
                    {
                        <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                            @file.Name <code>@file.Size bytes</code>
                        </MudListItem>
                    }
                </MudList>
            }
        </div>
        <div class="col-md-6">
            @if (files.Count == 0)
            {
                <MudAlert Severity="Severity.Warning" Square="true" Class="my-2">Fotoğraf Seçilmeden Kayıt Yapılamaz!</MudAlert>

            }
            else
            {
                <RadzenButton style="margin: 0 1rem 1rem 0; width: 100%" Icon="save" BusyText="Kayıt Yapılıyor ..." IsBusy=@busy Click=@OnBusyClick Text="TALEBİ KAYDET" />

            }


        </div>
    </div>

</RadzenCard>


@code {
    IList<IBrowserFile> files = new List<IBrowserFile>();

    List<Talep> TalepList = new List<Talep>();
    List<IsTipleri> TalepTipleriList = new List<IsTipleri>();
    List<Amirlik> AmirlikList = new List<Amirlik>();
    List<IsAltTipleri> IsAltTipleriList = new List<IsAltTipleri>();
    private string[] Istipi = { };

    int amirlikid = 0;

    bool busy;
    string value = "fsd";

    //IEnumerable<Taleptipleri> selectedtalepedilecekisler = new Taleptipleri[] { };
    //List<Taleptipleri> selectedtalepedilecekisler = new List<Taleptipleri>() { };
    IEnumerable<string> selectedtalepedilecekisler = new string[] { };
    private HashSet<IsAltTipleri> options { get; set; } = new HashSet<IsAltTipleri>() {  };
    private IsAltTipleri valuef { get; set; } = new IsAltTipleri();
    Func<IsAltTipleri, string> converter = p => p?.IsAltTipi;

  

    IList<Foto>fotos = new List<Foto>();


    IEnumerable<IsTipleri>  Taleptipleri { get; set; }
    IEnumerable<Amirlik> Amirlikler { get; set; }
    IEnumerable<Talep>    Talepler { get; set; }
    IEnumerable<IsAltTipleri>  IsAltTipleri;

    [Parameter]
    public string IsTipiId { get; set; }

    async Task OnBusyClick()
    {
        var talep = new Talep
        {

            TalepKonu = "rer",
            TalepBaslik = "refe",
            Fotolar = fotos,

        };

        busy = true;
        //await Task.Delay(2000);

        var sd = await talepsService.PostTalep(talep);
        //await Http.PostAsJsonAsync<Talep>("/api/Taleps", talep);
        busy = false;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        Snackbar.Add("Kayıt Başarılı!", Severity.Success);
    }






    protected async override void OnInitialized()
    {
        Taleptipleri = await istipleriService.GetIsTipleris();
        IsAltTipleri = await isalttipleriService.GetIsAltTipleris();
        foreach(var z in IsAltTipleri)
        {
            Istipi.Append(z.IsAltTipi);
        }
        Amirlikler = await amirliksService.GetAmirliks();
        //listtalep = await talepsService.GetTaleps();
        //IsTipleriList.AddRange(lististipleri);
        //AmirlikList.AddRange(listyerleske);
        // TalepList.AddRange(listtalep);
        IsAltTipleriList.AddRange(IsAltTipleri);
        TalepTipleriList.AddRange(Taleptipleri);
        AmirlikList.AddRange(Amirlikler);

    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);

        }
        var entries = e.GetMultipleFiles();

        foreach (var file in e.GetMultipleFiles())
        {
            var resizedImageFile = await file.RequestImageFileAsync(format,
            1024, 1024);
            long max = 2000000;
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream(max).ReadAsync(buffer);
            var imageDataUrl =
            $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            fotos.Add(new Foto
            {
                FotoData = buffer,
                FotoAdi = file.Name,
                FotoEklenmeTarihi = DateTime.Now
            });
        }
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        Snackbar.Add($"{entries.Count} Fotoğraf Eklendi!", Severity.Info);
    }
    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object>
            ? string.Join(", ", (IEnumerable<object>
                )value) : value;
        value = name;

        Console.WriteLine($"{name} value changed to {str}");
    }




    void OnError(UploadErrorEventArgs args, string name)
    {
        Console.WriteLine($"{args.Message}");
    }

}
