@page "/panel/buroekrani"
@using Zabita.Entities.Concrete
@using ZabitaWEB.Client.Services.Abstract
@using System.Timers;
@using ActionScheduler;
@using Microsoft.AspNetCore.Mvc;

@inject IDialogService DialogService

@inject ITalepsService talepsService
@inject IAmirliksService amirliksService
@inject IIsTiplerisService istipleriService
@inject IIsAltTiplerisService isalttipleriService
@inject IPersonelsService personelService
@inject ITalepAltSonucusService talepaltsonucuService
@inject NavigationManager NavigationManager;
@inject HttpClient _httpClient;
@inject ISnackbar Snackbar

<MudGrid >


    <MudItem lg="6" md="6" xl="6" xs="12" Style="width:100%">


        <MudCard>
            <MudCardHeader Style="background-color:lightblue;height:2.5em">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Dark">
                        Gelen İşler
                    </MudText>
                </CardHeaderContent>

            </MudCardHeader>
            <MudCardContent Style="padding:0">
                <RadzenDataGrid @ref="gridr" Data="@talepler" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="5"
                                AllowSorting="true" TItem="Talep" AllowVirtualization="false" ColumnWidth="270px" 
                                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@SeciliTalep>
                    <Columns>
                        <RadzenDataGridColumn TItem="Talep" Width="40px" Sortable="false" Filterable="false">

                            <Template Context="data">
                                <RadzenCheckBox TriState="false" Value="@(SeciliTalep != null && SeciliTalep.Contains(data))" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Talep" Title="Detay" Filterable="false" Width="7em">
                            <Template Context="data">
                                <MudButton Variant="Variant.Outlined" OnClick="@(() => OpenDialog(data))"> Detay</MudButton>
                            </Template>

                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Talep" Property="TalepAmirlik" Title="Talep Amirliği" />
                        <RadzenDataGridColumn TItem="Talep" Property="TalepKonu" Title="Gonderildi" />

                    </Columns>

                </RadzenDataGrid>
            </MudCardContent>
            <MudCardActions>
                <MudGrid>
                    <MudItem sm="12" lg="12" md="12" xs="12" xl="12">
                        <RadzenDropDown AllowClear="true" Style="display:block;  text-align: left !important;direction:inherit;text-anchor:start;width:100% !important"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        FilterOperator="StringFilterOperator.StartsWith"
                                        AllowFiltering="true" TValue="int" @bind-Value=@personelId
                                        Data=@PersonelList TextProperty="PersonelIsim" ValueProperty="PersonelId" />
                    </MudItem>
                    <MudItem Style="margin-top:-1.2em">

                        <MudButton Disabled="@_processing" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@OnBusyClick" EndIcon="@Icons.Material.Outlined.Send">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Gönderiliyor..</MudText>
                            }
                            else
                            {
                                <MudText>Gönder</MudText>
                            }
                        </MudButton>
                    </MudItem>

                </MudGrid>





            </MudCardActions>
        </MudCard>





        <MudCard>
            <MudCardHeader Style="background-color: lightblue; height: 2.5em">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Dark">Atanmış İşler</MudText>
                </CardHeaderContent>

            </MudCardHeader>
            <MudCardContent Style="padding:0">
                <RadzenDataGrid @ref="gridc" Data="@atanmisisler" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                                AllowSorting="true" TItem="Talep" AllowVirtualization="false" ColumnWidth="270px"
                                SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SeciliTalepGecmis>
                    <Columns>
                        <RadzenDataGridColumn TItem="Talep" Width="40px" Sortable="false" Filterable="false">

                            <Template Context="data">
                                <RadzenCheckBox TriState="false" Value="@(SeciliTalepGecmis != null && SeciliTalepGecmis.Contains(data))" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Talep" Title="Detay" Filterable="false" Width="7em">
                            <Template Context="data">
                                <MudButton Variant="Variant.Outlined" OnClick="@(() => OpenDialog(data))"> Detay</MudButton>
                            </Template>

                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Talep" Property="TalepAmirlik" Title="Talep Amirliği" />
                        <RadzenDataGridColumn TItem="Talep" Property="TalepKonu" Title="Gonderildi" />

                    </Columns>

                </RadzenDataGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@TalepGeriAl" EndIcon="@Icons.Outlined.SettingsBackupRestore">Talebi Geri Al</MudButton>
            </MudCardActions>
        </MudCard>

    </MudItem>

    <MudItem xs="12" xl="6" md="6" lg="6" Style="width:100%">


        <MudCard>
            <MudCardHeader Style="background-color: lightblue; height: 2.5em">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6" Color="Color.Dark">
                        Geçmiş İşler
                    </MudText>
                </CardHeaderContent>

            </MudCardHeader>
            <MudCardContent Style="padding:0">
                <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowVirtualization="true" AllowPaging="true" AllowSorting="true" Data="@gecmis" TItem="Talep" ColumnWidth="11em" PageSize="20">
                    <Columns>
                        <RadzenDataGridColumn TItem="Talep" Property="TalepBaslik" Title="Talep Adı" />
                        <RadzenDataGridColumn TItem="Talep" Property="TalebinYapilmaTarihi" Title="Talep Tarihi">
                            <Template Context="data">
                                @String.Format("{0:d}", data.TalebinYapilmaTarihi)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Talep" Property="TalepAciklama" Title="Talep Konusu" />
                        <RadzenDataGridColumn TItem="Talep" Property="TalepKonu" Title="Talep Eden Personel" />

                    </Columns>
                </RadzenDataGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" EndIcon="@Icons.Custom.FileFormats.FileExcel" Link="api/Taleps/export">  Excel</MudButton>
             

            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>
@code{

    RadzenDataGrid<Talep> grid;
    RadzenDataGrid<Talep> gridc;
    RadzenDataGrid<Talep> gridr;
    public bool ShowDetails { get; set; } = false;
    private bool _processing = false;

    [Parameter]
    public IEnumerable<IsTipleri> istipleri { get; set; } = new List<IsTipleri>();
    [Parameter]
    public IEnumerable<Amirlik> amirlikler { get; set; }
    public IList<Talep> SeciliTalep { get; set; } = new List<Talep>();
    public IList<Talep> SeciliTalepGecmis { get; set; } = new List<Talep>();
    public List<Talep> TalepList = new List<Talep>();
    List<Amirlik> AmirlikList = new List<Amirlik>();
    public IList<Talep> talepler { get; set; } = new List<Talep>();
    public IList<Talep> talepler1 { get; set; } = new List<Talep>();
    public IList<Talep> atanmisisler { get; set; } = new List<Talep>();
    public IList<Talep> gecmis { get; set; } = new List<Talep>();
    int count { get; set; } = 0;
    private HashSet<Personel> SeciliPersonel { get; set; } = new HashSet<Personel>() { };
    List<Personel> PersonelList = new List<Personel>();
    int personelId = 0;

    bool busy;
    async void LoadData()
    {

        gecmis = await talepsService.GetDurumTalep("2");
        atanmisisler = await talepsService.GetDurumTalep("1");
        talepler = await talepsService.GetDurumTalep("0");

        //count = talepler.Count();

        await gridc.Reload();
        await gridr.Reload();
        StateHasChanged();

    }



    // To Start The Scheduler

    //jobScheduler.Stop(); // To Stop The Scheduler
    protected override async Task OnInitializedAsync()
    {
        ActionScheduler jobScheduler = new ActionScheduler(TimeSpan.FromSeconds(20), () =>
        {

            this.LoadData();
        });
        jobScheduler.Start();
        // talepler = await Task.Run(() => talepsService.GetTaleps());
        // amirlikler = await Task.Run(() => amirliksService.GetAmirliks());
        //  istipleri = await Task.Run(() => istipleriService.GetIsTipleris());
        @* TalepList.AddRange(talepler);
            AmirlikList.AddRange(amirlikler);
            TalepList.AddRange(talepler);
            SeciliTalep = TalepList.Take(1).ToList();*@

        //talepler1 = talepler;
        //talepler = talepler.Where(s => s.TalepDurumu == "0").ToList();
        //atanmisisler = talepler1.Where(s => s.TalepDurumu == "1").ToList();

        //SeciliTalep = talepler.Take(1).ToList();
        this.LoadData();
        //Timer timer = new Timer(5000);
        //timer.Elapsed += (s, e) => { InvokeAsync(grid.Reload); };
        //timer.Start();
        //base.OnInitialized();
        PersonelList = await personelService.GetTalepPersonel(1, "1");


    }



    async Task OpenDialog(Talep talep)
    {
        MudBlazor.DialogOptions fullScreen = new MudBlazor.DialogOptions() { FullScreen = true, CloseButton = true };

        var parameters = new DialogParameters { ["Talep"] = talep };

        var result = await DialogService.Show<DetayDialog>("talep", parameters, fullScreen).Result;

    }


    async Task OnBusyClick()
    {
        //  TalepAltSonucu talepAltSonucu = new TalepAltSonucu {};
        //var personelid = SeciliPersonel.First().PersonelId;
        //var personel = new Personel();
        //personel = SeciliPersonel.First();

        if (SeciliTalep.Count != 0 & personelId !=0)
        {
            _processing = true;
            foreach (var i in SeciliTalep)
            {

                i.TalepDurumu = "1";
                i.TalepId = i.TalepId;
                i.TalebinAtanmaTarihi = DateTime.Now;
                i.TalebiKarsilayanPersonelId = personelId;
                await talepsService.PutTalep(i.TalepId, i);






            }
            this.LoadData();
            gridc.Reload().GetAwaiter().GetResult();
            gridr.Reload().GetAwaiter().GetResult();

            StateHasChanged();
            await this.Show("İş Gönderildi!", Severity.Success);

            _processing = false;
        }
        else
        {
            await  this.Show("Tablodan İş ve Personel Seçiniz!",Severity.Warning);

        }

    }
    public void Export()
    {

        talepsService.Export();
        // return new ExcelResult<Talep>(results, "Demo Sheet Name", "Fingers10");


    }
    public async Task TalepGeriAl()
    {
        if (SeciliTalepGecmis.Count != 0)
        {
            Talep talep = SeciliTalepGecmis.First();
            talep.TalepDurumu = "0";
            await talepsService.PutTalep(SeciliTalepGecmis.First().TalepId, talep);
            // return new ExcelResult<Talep>(results, "Demo Sheet Name", "Fingers10");
            this.LoadData();
            StateHasChanged();
            await this.Show("Talep Geri Alındı!", Severity.Info);

        }
        else
        {
            await this.Show("Tablodan İş Seçiniz!",Severity.Warning);
        }

    }
    async Task Show(string message,Severity severity)
    {
        Snackbar.Configuration.VisibleStateDuration = 2000;
        Snackbar.Configuration.HideTransitionDuration = 500;
        Snackbar.Configuration.ShowTransitionDuration = 500;
        Snackbar.Add(message, severity, config =>
        {

            config.Onclick = snackbar =>
            {
                return  Task.CompletedTask;
            };
        });
    }

}

