@page "/panel/buroekrani"
@using Zabita.Entities.Concrete
@using ZabitaWEB.Client.Services.Abstract
@using System.Timers;


@inject IDialogService DialogService

@inject ITalepsService talepsService
@inject IAmirliksService amirliksService
@inject IIsTiplerisService istipleriService
@inject IIsAltTiplerisService isalttipleriService
@inject IPersonelsService personelService
@inject ITalepAltSonucusService talepaltsonucuService
@inject NavigationManager NavigationManager;


<div class="row mt-4">
    <div class="col-md-6">
        <div class="row">
            <div class="col-md-12 mb-4">
                <RadzenDataGrid @ref="gridr" Data="@talepler" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="5"
                                AllowSorting="true" TItem="Talep" AllowVirtualization="true" ColumnWidth="300px"
                                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@SeciliTalep>
                    <Columns>
                        <RadzenDataGridColumn TItem="Talep" Width="40px" Sortable="false" Filterable="false">

                            <Template Context="data">
                                <RadzenCheckBox TriState="false" Value="@(SeciliTalep != null && SeciliTalep.Contains(data))" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Talep" Title="Detay" Filterable="false" Width="7em">
                            <Template Context="data">
                                <MudButton Variant="Variant.Outlined" OnClick="@(() => OpenDialog(data))"> Detay</MudButton>
                            </Template>

                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Talep" Property="TalepAmirlik" Title="Talep Amirliği" />
                        <RadzenDataGridColumn TItem="Talep" Property="TalepKonu" Title="Gonderildi" />

                    </Columns>

                </RadzenDataGrid>
            </div>
        </div>


        <div class="row">
            <div class="col-md-12"></div>
        </div>

        <div class="row">
            <div class="col-12 mb-n1 mt-n1">
                <h5>Atanacak Personeli Seçin</h5>

            </div>
            <div class="col-lg-8 col-sm-12 mt-1 mb-1">
                <RadzenDropDown AllowClear="true" Style=" display: flex; text-align: right !important;direction:inherit;text-anchor:start"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                FilterOperator="StringFilterOperator.StartsWith"
                                AllowFiltering="true" TValue="int" @bind-Value=@personelId
                                Data=@PersonelList TextProperty="PersonelIsim" ValueProperty="PersonelId" />

            </div>
            <div class="col-lg-4 col-sm-12 mt-1 mb-1">
                <RadzenButton Style="display: flex; text-align: left !important;width:100% " Icon="send" BusyText="Gönderiliyor ..." IsBusy=@busy Click=@OnBusyClick Text="Gonder" />
            </div>

        </div>
        <div class="row">
            <div class="col-md-12">
                <RadzenCard Style="width:100%; margin-bottom: 20px; height:28em;">

                    <div class="card-header" style="max-height:3em;background-color:white"><h5 style="text-align:start">Atanmış İşler</h5></div>

                    <RadzenDataGrid @ref="gridc" Data="@atanmisisler" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                                    AllowSorting="true" TItem="Talep" AllowVirtualization="true" ColumnWidth="300px"
                                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SeciliTalepGecmis>
                        <Columns>
                            <RadzenDataGridColumn TItem="Talep" Width="40px" Sortable="false" Filterable="false">

                                <Template Context="data">
                                    <RadzenCheckBox TriState="false" Value="@(SeciliTalepGecmis != null && SeciliTalepGecmis.Contains(data))" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Talep" Title="Detay" Filterable="false" Width="7em">
                                <Template Context="data">
                                    <MudButton Variant="Variant.Outlined" OnClick="@(() => OpenDialog(data))"> Detay</MudButton>
                                </Template>

                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Talep" Property="TalepAmirlik" Title="Talep Amirliği" />
                            <RadzenDataGridColumn TItem="Talep" Property="TalepKonu" Title="Gonderildi" />

                        </Columns>

                    </RadzenDataGrid>
                </RadzenCard>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <RadzenButton Text="Excel" Icon="grid_on" Click="@(args => Export())" />
        <RadzenButton Text="CSV" Icon="wrap_text" Click="@(args => Export())" />
        <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@gecmis" TItem="Talep">
            <Columns>
                <RadzenDataGridColumn TItem="Talep" Property="TalepBaslik" Title="Talep Adı" />
                <RadzenDataGridColumn TItem="Talep" Property="TalebinYapilmaTarihi" Title="Talep Tarihi">
                    <Template Context="data">
                        @String.Format("{0:d}", data.TalebinYapilmaTarihi)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Talep" Property="TalepAciklama" Title="Talep Konusu" />
                <RadzenDataGridColumn TItem="Talep" Property="TalepKonu" Title="Talep Eden Personel" />

            </Columns>
        </RadzenDataGrid>
    </div>
</div>
@code{

    RadzenDataGrid<Talep> grid;
    RadzenDataGrid<Talep> gridc;
    RadzenDataGrid<Talep> gridr;
    public bool ShowDetails { get; set; } = false;

    [Parameter]
    public IEnumerable<IsTipleri> istipleri { get; set; } = new List<IsTipleri>();
    [Parameter]
    public IEnumerable<Amirlik> amirlikler { get; set; }
    public IList<Talep> SeciliTalep { get; set; } = new List<Talep>();
    public IList<Talep> SeciliTalepGecmis { get; set; } = new List<Talep>();
    public List<Talep> TalepList = new List<Talep>();
    List<Amirlik> AmirlikList = new List<Amirlik>();
    public IList<Talep> talepler { get; set; } = new List<Talep>();
    public IList<Talep> talepler1 { get; set; } = new List<Talep>();
    public IList<Talep> atanmisisler { get; set; } = new List<Talep>();
    public IList<Talep> gecmis { get; set; } = new List<Talep>();
    int count { get; set; } = 0;
    private HashSet<Personel> SeciliPersonel { get; set; } = new HashSet<Personel>() { };
    List<Personel> PersonelList = new List<Personel>();
    int personelId = 0;

    bool busy;
    async void LoadData(LoadDataArgs args)
    {



        //count = talepler.Count();
        await grid.Reload();
        StateHasChanged();

    }
    protected override async Task OnInitializedAsync()
    {
        // talepler = await Task.Run(() => talepsService.GetTaleps());
        // amirlikler = await Task.Run(() => amirliksService.GetAmirliks());
        //  istipleri = await Task.Run(() => istipleriService.GetIsTipleris());
        @* TalepList.AddRange(talepler);
            AmirlikList.AddRange(amirlikler);
            TalepList.AddRange(talepler);
            SeciliTalep = TalepList.Take(1).ToList();*@

        //talepler1 = talepler;
        //talepler = talepler.Where(s => s.TalepDurumu == "0").ToList();
        //atanmisisler = talepler1.Where(s => s.TalepDurumu == "1").ToList();
        gecmis = await talepsService.GetDurumTalep("2");
        atanmisisler = await talepsService.GetDurumTalep("1");
        talepler = await talepsService.GetDurumTalep("0");
        //SeciliTalep = talepler.Take(1).ToList();

        //Timer timer = new Timer(5000);
        //timer.Elapsed += (s, e) => { InvokeAsync(grid.Reload); };
        //timer.Start();
        //base.OnInitialized();
        PersonelList = await personelService.GetTalepPersonel(1, "1");


    }



    async Task OpenDialog(Talep talep)
    {
        MudBlazor.DialogOptions fullScreen = new MudBlazor.DialogOptions() { FullScreen = true, CloseButton = true };

        var parameters = new DialogParameters { ["Talep"] = talep };

        var result = await DialogService.Show<DetayDialog>("talep", parameters, fullScreen).Result;

    }


    async Task OnBusyClick()
    {
        busy = true;
        //  TalepAltSonucu talepAltSonucu = new TalepAltSonucu {};
        //var personelid = SeciliPersonel.First().PersonelId;
        //var personel = new Personel();
        //personel = SeciliPersonel.First();


        foreach (var i in SeciliTalep)
        {

            i.TalepDurumu = "1";
            i.TalepId = i.TalepId;
            i.TalebiKarsilayanPersonelId = personelId;
            await talepsService.PutTalep(i.TalepId, i);






        }

        gridc.Reload().GetAwaiter().GetResult();
        gridr.Reload().GetAwaiter().GetResult();

        StateHasChanged();
        busy = false;
    }
    public void Export()
    {

        talepsService.Export(new Query() { OrderBy = grid.Query.OrderBy, Filter = grid.Query.Filter });

    }
}

