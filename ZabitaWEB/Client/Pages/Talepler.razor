@page "/talep"
@using Zabita.Entities.Concrete
@using ZabitaWEB.Client.Services.Abstract
@inject IAmirliksService amirliksService
@inject ITalepsService talepsService
@inject IIsTiplerisService istipleriService
@inject NavigationManager UriHelper

<div class="row">
    <div class="col-md-12">

        <RadzenCard>
          

           

            <div class="card-header " style="max-height:3em;background-color:white;font-size:larger;text-align:justify">
                <div class="row">
                    <div class="col-6">

                        <h3> İş Seçimi </h3>
                       
                    </div>
                    <div class="col-6">

                        <div class="d-grid gap-0 d-flex justify-content-end"  >
                            <button @onclick="@ReloadData" class="btn btn-sm" type="button">
                                <RadzenIcon Icon="cached" />
                            </button>
                        </div>
                    </div>
                </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mt-3">

                            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            TValue="int" @bind-Value=@amirlikid Placeholder="Amirlik Seçiniz..."
                                            Data=@AmirlikList SelectedItem="@selectedamirliks" TextProperty="AmirlikIsım" ValueProperty="AmirlikID" Style="width:100%" />

                        </div>
                        <div class="col-md-6 mt-3">

                            <RadzenDropDown TValue="int" @bind-Value=@istipiid Placeholder="İş Seçiniz..." Data="@(IsTipleriList.Where(o => o.AmirlikId == amirlikid.ToString()))"
                                            Change=@(args => OnChange(args, "DropDown with multiple selection")) TextProperty="IsTipi" ValueProperty="IstipiID"
                                            Style="margin-bottom: 20px; width: 100%" />

                        </div>

                    </div>

</RadzenCard>
    </div>
</div>
<div class="row">
    <div class="col-md-12 mt-3 ">
        @if (AmirlikList == null)
        {

            <div class="spinner">Yükleniyor...</div>
        }
        else

        {

            @foreach (var widget in _components)
            {
                if (widget.Key == 1 && istipiid == 1)
                {
                    string zz = istipiid.ToString();
                    <DaireBakimOnarim IsTipiId=@zz />

                }
                else if (widget.Key == 2 && istipiid == 2)
                {
                    string zz = istipiid.ToString();

                    <Isg IsTipiId="@zz" />
                }

            }
        }
    </div>


</div>
<div>
</div>


@code {

    Dictionary<int, IComponent> _components = new Dictionary<int, IComponent>();
    int amirlikid = 0;
    IEnumerable<string> selectedamirliks;
    int istipiid = 0;



    List<Amirlik> AmirlikList = new List<Amirlik>();
    List<Talep> TalepList = new List<Talep>();
    List<IsTipleri> IsTipleriList = new List<IsTipleri>();

    IEnumerable<Amirlik> listamirlik;
    IEnumerable<Talep> listtalep;
    IEnumerable<IsTipleri> lististipleri;


    void ChangeBound(object value, string name)
    {


    }
    void NavigatetoNextComponent()
    {
        UriHelper.NavigateTo("daire");
    }

    
    void  ReloadData()
    {
        IsTipleriList.Clear();
        AmirlikList.Clear();
        _components.Clear();
        this.OnParametersSet();
        //IsTipleriList.Clear();
        //AmirlikList.Clear();
        //lististipleri = await istipleriService.GetIsTipleris();


        //listamirlik = await amirliksService.GetAmirliks();

        //var amirlik = listamirlik.Where(s => s.TalepEdilebilir == true);
        //// listtalep = await talepsService.GetTaleps();
        //IsTipleriList.AddRange(lististipleri);

        //AmirlikList.AddRange(amirlik);
        //StateHasChanged();

        //TalepList.AddRange(listtalep);
    }
    protected async override void OnParametersSet()
    {
        try
        {
            lististipleri = await istipleriService.GetIsTipleris();


            listamirlik = await amirliksService.GetAmirliks();

            var amirlik = listamirlik.Where(s => s.TalepEdilebilir == true);
            // listtalep = await talepsService.GetTaleps();
            IsTipleriList.AddRange(lististipleri);

            AmirlikList.AddRange(amirlik);
            //TalepList.AddRange(listtalep);

            _components.Add(1, new DaireBakimOnarim());
            _components.Add(2, new Isg());
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message.ToString());
        }


    }




    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }
    void OnChange()
    {
        var lististip = lististipleri.Where(s => s.AmirlikId.Equals(amirlikid));
        IsTipleriList.AddRange(lististip);
    }
    void OnChange(object value, string name)
    {
        //TalepList.AddRange(listtalep);

    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");



    }
}
