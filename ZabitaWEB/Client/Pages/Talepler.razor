@page "/talep"
@using Zabita.Entities.Concrete
@using ZabitaWEB.Client.Services.Abstract
@inject IAmirliksService amirliksService
@inject IYerleskesService amirliksServicee

<div class="row">
    <div class="col-md-12">
        <RadzenCard>
            <div class="card-header " style="max-height:2.3em;background-color:white;font-size:larger;text-align:justify"><h3> İş Seçimi</h3> </div>

            <div class="row">
                <div class="col-md-6 mt-3">
                    
                

                                 <RadzenDropDown AllowClear="true" TValue="string" AllowVirtualization="true" Style="width:300px" 
                                AllowFiltering="true" Data=@listyerleske TextProperty="AmirlikIsım" ValueProperty="AmirlikID"
                                Change=@(args => OnChange(args, "DropDown with virtualization")) />
                   </div>
                <div class="col-md-6 mt-3">

                </div>
            </div>
        </RadzenCard>

    </div>
 
</div>
<div class="row">
    <div class="col-md-12 mt-3 ">
       
        @*<DaireBakimOnarim Products=@listyerleske></DaireBakimOnarim>*@
    </div>
    
    

</div>
<div>
</div>


@code {

    void ChangeBound(object value, string name)
    {
        Console.WriteLine($"{name} value changed to {myModel.MyValue}");
     
       
    }
    IEnumerable<string> multipleValues = new string[] { "ALFKI", "ANATR" };
    
    MyObject myModel = new MyObject();
        List<Amirlik> Options = new List<Amirlik>();

    class MyObject
    {
        public int? MyValue { get; set; } = 3;
    }
    IEnumerable<Amirlik> listyerleske;
    IEnumerable<Amirlik> productsd;

    protected async override void OnInitialized()
    {

        listyerleske= await amirliksService.GetAmirliks();
        
        
        @*listyerleske = await amirliksServicee.GetYerleskes();*@

    }


    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }
       void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"{name} value changed to {str}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");


       
    }
}
