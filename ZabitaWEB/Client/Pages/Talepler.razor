@page "/talep"
@using Zabita.Entities.Concrete
@using ZabitaWEB.Client.Services.Abstract
@inject IAmirliksService amirliksService
@inject ITalepsService talepsService
@inject NavigationManager UriHelper

<div class="row">
    <div class="col-md-12">
        <RadzenCard>
            <div class="card-header " style="max-height:2.3em;background-color:white;font-size:larger;text-align:justify"><h3> İş Seçimi</h3> </div>

            <div class="row">
                <div class="col-md-6 mt-3">

                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" TValue="int" @bind-Value=@value Placeholder="Select..."
                                    Data=@Options TextProperty="AmirlikIsım" ValueProperty="AmirlikID" Change=@(args => OnChange(args, "DropDown with placeholder")) Style="width:300px"/>
                </div>
                <div class="col-md-6 mt-3">
                    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value=multipleValues Multiple="true" Placeholder="Select..." Data=@Options TextProperty="AmirlikIsım" ValueProperty="AmirlikID"
                                     Style="width:300px" />

                    <RadzenDropDown TValue="int" @bind-Value=@talep Placeholder="Select order" Data="@(listtalep.Where(o => o.TalepId == value))" Change=@(args => OnChange(args, "DropDown with multiple selection")) TextProperty="TalepKonu" ValueProperty="TalepId" Style="margin-bottom: 20px"/>

                </div>
            </div>
        </RadzenCard>
    </div>
</div>
<div class="row">
    <div class="col-md-12 mt-3 ">
        @if (Options == null)
        {
            <div class="spinner"></div>
        }
        else

        {
            @foreach (var widget in _components)
            {
                switch (widget.Key)
                {
                    case 1:
                        @*<DaireBakimOnarim Products=Options />*@
                        break;
                    case 2:
                        @*<Isg Products=Options />*@
                        break;

                }
            }
            @foreach (var widget in _components)
            {
                if (widget.Key == 2 && @value==2 )
                {
                    <DaireBakimOnarim Products=Options />

                }
                else if (widget.Key == 1 && @value == 1)
                {
                    <Isg Products=Options />
                }

            }
        }
    </div>


</div>
<div>
</div>


@code {

    Dictionary<int, IComponent> _components = new Dictionary<int,IComponent>();
    int value=0 ;
    int talep=0 ;



    private IEnumerable<int> multipleValues = new int[] { };

    void ChangeBound(object value, string name)
    {


    }
    void NavigatetoNextComponent()
    {
        UriHelper.NavigateTo("daire");
    }

    List<Amirlik> Options = new List<Amirlik>();
    List<Talep> Taleps = new List<Talep>();


    IEnumerable<Amirlik> listyerleske;
    IEnumerable<Talep> listtalep;

    protected async override void OnInitialized()
    {

        listyerleske = await amirliksService.GetAmirliks();
        listtalep = await talepsService.GetTaleps();

        Options.AddRange(listyerleske);

        _components.Add(1,new DaireBakimOnarim());
        _components.Add(2,new Isg());
    }


    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }
    void OnChange(object value, string name)
    {
        Taleps.AddRange(listtalep);

    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");



    }
}
