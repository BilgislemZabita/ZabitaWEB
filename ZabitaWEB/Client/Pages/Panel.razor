@page "/panel"
@using Zabita.Entities.Concrete
@using ZabitaWEB.Client.Services.Abstract
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers;
@using System.Text;
@using Newtonsoft.Json
@inject ITalepsService talepsService
@inject IAmirliksService amirliksService
@inject IIsTiplerisService istipleriService
@inject IIsAltTiplerisService isalttipleriService
@inject IUserService userService
@inject HttpClient _httpClient

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager navigationManager
<MudGrid Style="position:center">
    <MudItem xl="12" md="12" sm="12" lg="12" xs="12" Style="padding:0">

        <MudTabs Elevation="24" Rounded="true" Centered="true" Border="true" Position="Position.Top" Color="@Color.Info" PrevIcon="@Icons.Filled.SkipPrevious" NextIcon="@Icons.Filled.SkipNext">
            <MudTabPanel Text="Daire Büro">
                <YoneticiEkrani istipleri="@Istipleris" amirlikler="@Amirlikler"> </YoneticiEkrani>
            </MudTabPanel>
            <MudTabPanel Text="Daire Personel Ekranı">
                <DairePersonelEkrani></DairePersonelEkrani>

            </MudTabPanel>
            <MudTabPanel Text="Three" />
            <MudTabPanel Text="Four" />
            <MudTabPanel Text="Five" />

        </MudTabs>

    </MudItem>
</MudGrid>



@code {
    bool disabled = true;
    IList<IBrowserFile> files = new List<IBrowserFile>();

    List<Talep> TalepList = new List<Talep>();
    List<IsTipleri> IstipleriList = new List<IsTipleri>();
    List<Amirlik> AmirlikList = new List<Amirlik>();
    List<IsAltTipleri> IsAltTipleriList = new List<IsAltTipleri>();
    private string[] Istipi = { };

    int amirlikid = 0;

    bool busy;
    string isbilgileri = "";
    string yerleskebilgileri = "";

    //IEnumerable<Taleptipleri> selectedtalepedilecekisler = new Taleptipleri[] { };
    //List<Taleptipleri> selectedtalepedilecekisler = new List<Taleptipleri>() { };
    IEnumerable<string> selectedtalepedilecekisler = new string[] { };
    private HashSet<IsAltTipleri> options { get; set; } = new HashSet<IsAltTipleri>() { };
    private IsAltTipleri secilenalttip { get; set; } = new IsAltTipleri();
    Func<IsAltTipleri, string> converter = p => p?.IsAltTipi;



    IList<Foto> fotos = new List<Foto>();
    IList<TalepAltSonucu> talepAltSonucus = new List<TalepAltSonucu>();


    IEnumerable<IsTipleri> Istipleris { get; set; }
    string deneme { get; set; }
    IEnumerable<Amirlik> Amirlikler { get; set; }
    List<Talep> Talepler { get; set; } = new List<Talep>();
    IEnumerable<IsAltTipleri> IsAltTipleri;

    [Parameter]
    public string IsTipiId { get; set; }

    async Task OnBusyClick()
    {
        foreach (var ist in options)
        {
            talepAltSonucus.Add(new TalepAltSonucu()
            {
                TalepAltSonucuAciklama = ist.IsAltTipiAciklama,
                TalepAltSonucuTipi = ist.IsAltTipi
            }

            );

        }
        var talep = new Talep
        {
            TalepKonu = amirlikid.ToString(),
            TalepBaslik = "deneme",
            TalepAciklama = isbilgileri,
            Fotolar = fotos,
            YerleskeAciklamasi = yerleskebilgileri,
            AmirlikId = amirlikid.ToString(),
            TalebinYapilmaTarihi = DateTime.Now,
            TalepAltSonucus = talepAltSonucus,
            TalepIstipleriID = IsTipiId

        };

        busy = true;
        //await Task.Delay(2000);

        var sd = await talepsService.PostTalep(talep);
        //await Http.PostAsJsonAsync<Talep>("/api/Taleps", talep);
        busy = false;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        Snackbar.Add("Kayıt Başarılı!", Severity.Success);
        //NavigationManager.NavigateTo("talep", true);

        disabled = true;
    }






    protected override async Task OnInitializedAsync()
    {
        //        string entryToSerialize = @"{
        //  'userName': 'oguzhan.ozturk',
        //  'password': 'aqswde321'
        //}";
        //        string json=JsonConvert.SerializeObject(entryToSerialize);

        //        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ6YWJpdGFkYnNlcnZpY2V1c2VyIiwianRpIjoiMzVjOGJkMTMtNDk3Yi00ZWE2LWIwYjYtMjI4ZGRlZGM5ZDg2IiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjoibGRhcCIsIm5iZiI6MTYyODU4NDM4NiwiZXhwIjoxNjMxMTc2Mzg2LCJpc3MiOiJkZGQiLCJhdWQiOiJzZGZkc2ZkcyJ9.WyK49qulJ_dJkF_ZBdkdZ2e4pBLIRE7ofclD5doCASA");
        //        _httpClient.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
        //        _httpClient.DefaultRequestHeaders.Add("Access-Control-Allow-Methods", "HEAD, GET, POST, PUT, PATCH, DELETE");
        //        var result=await _httpClient.PostAsync(@"https://gauservices.ibb.gov.tr/api/LDAP/ValidateUser", new StringContent(entryToSerialize, Encoding.UTF8, "application/json"));
        //deneme = result.Content.ToString();
        //var myData = new
        //{
        //    userName = "oguzhan.ozturk",
        //    password = "aqswde321",
        //};

        //var json = JsonConvert.SerializeObject(myData);
        //var data = new StringContent(json, Encoding.UTF8, "application/json");

        //var url = "https://gauservices.ibb.gov.tr/api/LDAP/ValidateUser";
        //using var client = new HttpClient();
        //client.DefaultRequestHeaders.Add("User-Agent","");
        //var response = await client.PostAsync(url, data);

        //string result = response.Content.ReadAsStringAsync().Result;
        //Console.WriteLine(result);

        try
        {

            Istipleris = await istipleriService.GetIsTipleris();
            IsAltTipleri = await isalttipleriService.GetIsAltTipleris();

            Amirlikler = await amirliksService.GetAmirliks();
            Talepler = await talepsService.GetDurumTalep("0");
            var tt = await talepsService.GetDurumTalep("1");
            Talepler.AddRange(tt);
            //IsTipleriList.AddRange(lististipleri);
            //AmirlikList.AddRange(listyerleske);
            // TalepList.AddRange(listtalep);
            IsAltTipleriList.AddRange(IsAltTipleri);
            IstipleriList.AddRange(Istipleris);
            AmirlikList.AddRange(Amirlikler);
            StateHasChanged();

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message.ToString());
        }


    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);

        }
        var entries = e.GetMultipleFiles();

        foreach (var file in e.GetMultipleFiles())
        {
            var resizedImageFile = await file.RequestImageFileAsync(format,
            1024, 1024);
            long max = 2000000;
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream(max).ReadAsync(buffer);
            var imageDataUrl =
            $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            fotos.Add(new Foto
            {
                FotoData = buffer,
                FotoAdi = file.Name,
                FotoEklenmeTarihi = DateTime.Now
            });
        }
        disabled = false;
        StateHasChanged();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        Snackbar.Add($"{entries.Count} Fotoğraf Eklendi!", Severity.Info);

    }
    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object>
            ? string.Join(", ", (IEnumerable<object>
                )value) : value;
        value = name;

        Console.WriteLine($"{name} value changed to {str}");
    }





    void OnError(UploadErrorEventArgs args, string name)
    {
        Console.WriteLine($"{args.Message}");
    }

}



